diff --git a/LICENSE b/LICENSE
index 340cc35..a3fe05f 100644
--- a/LICENSE
+++ b/LICENSE
@@ -22,3 +22,25 @@ DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+-----------------------------------------
+
+Files: openbsd-compat/readpassphrase.h
+
+Copyright (c) 2000, 2002 Todd C. Miller <Todd.Miller@courtesan.com>
+
+Permission to use, copy, modify, and distribute this software for any
+purpose with or without fee is hereby granted, provided that the above
+copyright notice and this permission notice appear in all copies.
+
+THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+
+Sponsored in part by the Defense Advanced Research Projects
+Agency (DARPA) and Air Force Research Laboratory, Air Force
+Materiel Command, USAF, under agreement number F39502-99-1-0512.
diff --git a/examples/cred.c b/examples/cred.c
index 047dffd..b3fb771 100644
--- a/examples/cred.c
+++ b/examples/cred.c
@@ -15,10 +15,10 @@
 #include <unistd.h>
 #endif
 
-#include "../openbsd-compat/openbsd-compat.h"
+#include <err.h>
 
+#include "examples/util.h"
 #include "fido.h"
-#include "extern.h"
 
 #ifdef SIGNAL_EXAMPLE
 extern volatile sig_atomic_t got_signal;
diff --git a/examples/util.c b/examples/util.c
index f1e72d9..651e687 100644
--- a/examples/util.c
+++ b/examples/util.c
@@ -4,6 +4,10 @@
  * license that can be found in the LICENSE file.
  */
 
+#include "util.h"
+
+#include <err.h>
+
 #include <sys/types.h>
 #include <sys/stat.h>
 
@@ -25,13 +29,11 @@
 #include "../openbsd-compat/posix_win.h"
 #endif
 
-#include "../openbsd-compat/openbsd-compat.h"
 
 #include "fido.h"
 #include "fido/es256.h"
 #include "fido/rs256.h"
 #include "fido/eddsa.h"
-#include "extern.h"
 
 #ifdef SIGNAL_EXAMPLE
 volatile sig_atomic_t got_signal = 0;
diff --git a/examples/util.h b/examples/util.h
new file mode 100644
index 0000000..37877fd
--- /dev/null
+++ b/examples/util.h
@@ -0,0 +1,12 @@
+#ifndef THIRD_PARTY_LIBFIDO2_EXAMPLES_UTIL_H_
+#define THIRD_PARTY_LIBFIDO2_EXAMPLES_UTIL_H_
+
+#include <stdlib.h>
+
+int write_ec_pubkey(const char *path, const void *ptr, size_t len);
+int write_rsa_pubkey(const char *path, const void *ptr, size_t len);
+int write_eddsa_pubkey(const char *path, const void *ptr, size_t len);
+int write_blob(const char *path, const unsigned char *ptr, size_t len);
+int read_blob(const char *path, unsigned char **ptr, size_t *len);
+
+#endif  // THIRD_PARTY_LIBFIDO2_EXAMPLES_UTIL_H_
diff --git a/openbsd-compat/readpassphrase.h b/openbsd-compat/readpassphrase.h
index 0c4a59e..e4451f3 100644
--- a/openbsd-compat/readpassphrase.h
+++ b/openbsd-compat/readpassphrase.h
@@ -27,6 +27,8 @@
 
 #ifndef HAVE_READPASSPHRASE
 
+#include <stdlib.h>
+
 #define RPP_ECHO_OFF    0x00		/* Turn off echo (default). */
 #define RPP_ECHO_ON     0x01		/* Leave echo on. */
 #define RPP_REQUIRE_TTY 0x02		/* Fail if there is no tty. */
diff --git a/src/blob.h b/src/blob.h
index 6358c05..1e33dba 100644
--- a/src/blob.h
+++ b/src/blob.h
@@ -7,6 +7,10 @@
 #ifndef _BLOB_H
 #define _BLOB_H
 
+#include <stdlib.h>
+
+#include "third_party/libcbor/cbor.h"
+
 typedef struct fido_blob {
 	unsigned char	*ptr;
 	size_t		 len;
diff --git a/src/cbor.h b/src/cbor.h
new file mode 100644
index 0000000..9ea8d96
--- /dev/null
+++ b/src/cbor.h
@@ -0,0 +1,29 @@
+#ifndef THIRD_PARTY_LIBFIDO2_SRC_CBOR_H_
+#define THIRD_PARTY_LIBFIDO2_SRC_CBOR_H_
+
+#include "third_party/libcbor/cbor.h"
+#include "blob.h"
+#include "types.h"
+
+typedef struct fido_dev fido_dev_t;
+
+/* auxiliary cbor routines */
+int cbor_add_bool(cbor_item_t *, const char *, fido_opt_t);
+int cbor_add_bytestring(cbor_item_t *, const char *, const unsigned char *,
+                        size_t);
+int cbor_add_string(cbor_item_t *, const char *, const char *);
+int cbor_array_iter(const cbor_item_t *, void *,
+                    int (*)(const cbor_item_t *, void *));
+int cbor_build_frame(uint8_t, cbor_item_t *[], size_t, fido_blob_t *);
+int cbor_bytestring_copy(const cbor_item_t *, unsigned char **, size_t *);
+int cbor_map_iter(const cbor_item_t *, void *,
+                  int (*)(const cbor_item_t *, const cbor_item_t *, void *));
+int cbor_string_copy(const cbor_item_t *, char **);
+int parse_cbor_reply(const unsigned char *, size_t, void *,
+                     int (*)(const cbor_item_t *, const cbor_item_t *, void *));
+int add_cbor_pin_params(fido_dev_t *, const fido_blob_t *, const es256_pk_t *,
+                        const fido_blob_t *, const char *, cbor_item_t **,
+                        cbor_item_t **);
+void cbor_vector_free(cbor_item_t **, size_t);
+
+#endif  // THIRD_PARTY_LIBFIDO2_SRC_CBOR_H_
diff --git a/src/common.h b/src/common.h
new file mode 100644
index 0000000..521ff8d
--- /dev/null
+++ b/src/common.h
@@ -0,0 +1,39 @@
+#ifndef THIRD_PARTY_LIBFIDO2_SRC_COMMON_H_
+#define THIRD_PARTY_LIBFIDO2_SRC_COMMON_H_
+
+#include <stdlib.h>
+
+typedef struct fido_assert fido_assert_t;
+typedef struct fido_cbor_info fido_cbor_info_t;
+typedef struct fido_cred fido_cred_t;
+typedef struct fido_dev fido_dev_t;
+typedef struct fido_dev_info fido_dev_info_t;
+typedef struct es256_pk es256_pk_t;
+typedef struct es256_sk es256_sk_t;
+typedef struct rs256_pk rs256_pk_t;
+typedef struct eddsa_pk eddsa_pk_t;
+typedef struct fido_rp fido_rp_t;
+typedef struct fido_user fido_user_t;
+typedef struct fido_attstmt fido_attstmt_t;
+typedef struct fido_authdata fido_authdata_t;
+typedef struct fido_attcred fido_attcred_t;
+
+typedef void *fido_dev_io_open_t(const char *);
+typedef void fido_dev_io_close_t(void *);
+typedef int fido_dev_io_read_t(void *, unsigned char *, size_t, int);
+typedef int fido_dev_io_write_t(void *, const unsigned char *, size_t);
+
+typedef struct fido_dev_io {
+  fido_dev_io_open_t *open;
+  fido_dev_io_close_t *close;
+  fido_dev_io_read_t *read;
+  fido_dev_io_write_t *write;
+} fido_dev_io_t;
+
+typedef enum {
+  FIDO_OPT_OMIT = 0, /* use authenticator's default */
+  FIDO_OPT_FALSE,    /* explicitly set option to false */
+  FIDO_OPT_TRUE,     /* explicitly set option to true */
+} fido_opt_t;
+
+#endif  // THIRD_PARTY_LIBFIDO2_SRC_COMMON_H_
diff --git a/src/eddsa.c b/src/eddsa.c
index c346979..c1ba5ce 100644
--- a/src/eddsa.c
+++ b/src/eddsa.c
@@ -13,6 +13,7 @@
 #include "fido.h"
 #include "fido/eddsa.h"
 
+#ifndef GOOGLE3_LINUX
 #if defined(LIBRESSL_VERSION_NUMBER) || OPENSSL_VERSION_NUMBER < 0x10101000L
 EVP_PKEY *
 EVP_PKEY_new_raw_public_key(int type, ENGINE *e, const unsigned char *key,
@@ -50,6 +51,7 @@ EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret, size_t siglen,
 	return (0);
 }
 #endif /* LIBRESSL_VERSION_NUMBER || OPENSSL_VERSION_NUMBER < 0x10101000L */
+#endif /* !GOOGLE3_LINUX */
 
 #if OPENSSL_VERSION_NUMBER < 0x10100000L
 EVP_MD_CTX *
diff --git a/src/extern.h b/src/extern.h
index 2f69094..6b926bc 100644
--- a/src/extern.h
+++ b/src/extern.h
@@ -7,6 +7,9 @@
 #ifndef _EXTERN_H
 #define _EXTERN_H
 
+#include "blob.h"
+#include "common.h"
+
 /* aes256 */
 int aes256_cbc_dec(const fido_blob_t *, const fido_blob_t *, fido_blob_t *);
 int aes256_cbc_enc(const fido_blob_t *, const fido_blob_t *, fido_blob_t *);
diff --git a/src/fido.h b/src/fido.h
index f85a41a..70978fb 100644
--- a/src/fido.h
+++ b/src/fido.h
@@ -9,28 +9,11 @@
 
 #include <openssl/ec.h>
 #include <openssl/evp.h>
-
 #include <stdbool.h>
 #include <stdint.h>
 #include <stdlib.h>
 
-typedef void *fido_dev_io_open_t(const char *);
-typedef void  fido_dev_io_close_t(void *);
-typedef int   fido_dev_io_read_t(void *, unsigned char *, size_t, int);
-typedef int   fido_dev_io_write_t(void *, const unsigned char *, size_t);
-
-typedef struct fido_dev_io {
-	fido_dev_io_open_t  *open;
-	fido_dev_io_close_t *close;
-	fido_dev_io_read_t  *read;
-	fido_dev_io_write_t *write;
-} fido_dev_io_t;
-
-typedef enum {
-	FIDO_OPT_OMIT = 0, /* use authenticator's default */
-	FIDO_OPT_FALSE,    /* explicitly set option to false */
-	FIDO_OPT_TRUE,     /* explicitly set option to true */
-} fido_opt_t;
+#include "common.h"
 
 #ifdef _FIDO_INTERNAL
 #include <cbor.h>
diff --git a/src/fido/bio.h b/src/fido/bio.h
index 31dffe4..f860061 100644
--- a/src/fido/bio.h
+++ b/src/fido/bio.h
@@ -10,8 +10,10 @@
 #include <stdint.h>
 #include <stdlib.h>
 
+#include "blob.h"
 #include "fido/err.h"
 #include "fido/param.h"
+#include "types.h"
 
 #ifdef _FIDO_INTERNAL
 struct fido_bio_template {
diff --git a/src/fido/credman.h b/src/fido/credman.h
index 1c7cafe..bb5beb0 100644
--- a/src/fido/credman.h
+++ b/src/fido/credman.h
@@ -10,8 +10,10 @@
 #include <stdint.h>
 #include <stdlib.h>
 
+#include "blob.h"
 #include "fido/err.h"
 #include "fido/param.h"
+#include "types.h"
 
 #ifdef _FIDO_INTERNAL
 struct fido_credman_metadata {
diff --git a/src/fido/eddsa.h b/src/fido/eddsa.h
index 9de272d..e923c1c 100644
--- a/src/fido/eddsa.h
+++ b/src/fido/eddsa.h
@@ -8,10 +8,11 @@
 #define _FIDO_EDDSA_H
 
 #include <openssl/ec.h>
-
 #include <stdint.h>
 #include <stdlib.h>
 
+#include "types.h"
+
 eddsa_pk_t *eddsa_pk_new(void);
 void eddsa_pk_free(eddsa_pk_t **);
 EVP_PKEY *eddsa_pk_to_EVP_PKEY(const eddsa_pk_t *);
diff --git a/src/fido/es256.h b/src/fido/es256.h
index d3d13dd..ec3c7bf 100644
--- a/src/fido/es256.h
+++ b/src/fido/es256.h
@@ -8,10 +8,11 @@
 #define _FIDO_ES256_H
 
 #include <openssl/ec.h>
-
 #include <stdint.h>
 #include <stdlib.h>
 
+#include "types.h"
+
 es256_pk_t *es256_pk_new(void);
 void es256_pk_free(es256_pk_t **);
 EVP_PKEY *es256_pk_to_EVP_PKEY(const es256_pk_t *);
diff --git a/src/fido/rs256.h b/src/fido/rs256.h
index d2fa162..12b397c 100644
--- a/src/fido/rs256.h
+++ b/src/fido/rs256.h
@@ -8,10 +8,11 @@
 #define _FIDO_RS256_H
 
 #include <openssl/rsa.h>
-
 #include <stdint.h>
 #include <stdlib.h>
 
+#include "types.h"
+
 rs256_pk_t *rs256_pk_new(void);
 void rs256_pk_free(rs256_pk_t **);
 EVP_PKEY *rs256_pk_to_EVP_PKEY(const rs256_pk_t *);
diff --git a/src/hid_linux.c b/src/hid_linux.c
index 9d55453..9b9312d 100644
--- a/src/hid_linux.c
+++ b/src/hid_linux.c
@@ -13,6 +13,7 @@
 #include <libudev.h>
 #include <string.h>
 #include <unistd.h>
+#include <errno.h>
 
 #include "fido.h"
 
diff --git a/src/iso7816.h b/src/iso7816.h
index 426cd97..eaf213c 100644
--- a/src/iso7816.h
+++ b/src/iso7816.h
@@ -7,6 +7,9 @@
 #ifndef _ISO7816_H
 #define _ISO7816_H
 
+#include <stdint.h>
+#include <stdlib.h>
+
 #include "packed.h"
 
 PACKED_TYPE(iso7816_header_t,
diff --git a/src/log.h b/src/log.h
new file mode 100644
index 0000000..6761730
--- /dev/null
+++ b/src/log.h
@@ -0,0 +1,29 @@
+#ifndef THIRD_PARTY_LIBFIDO2_SRC_LOG_H_
+#define THIRD_PARTY_LIBFIDO2_SRC_LOG_H_
+
+#include <stdlib.h>
+
+/* log */
+#ifdef FIDO_NO_DIAGNOSTIC
+#define log_init(...) \
+  do { /* nothing */  \
+  } while (0)
+#define log_debug(...) \
+  do { /* nothing */   \
+  } while (0)
+#define log_xxd(...) \
+  do { /* nothing */ \
+  } while (0)
+#else
+#ifdef __GNUC__
+void log_init(void);
+void log_debug(const char *, ...) __attribute__((__format__(printf, 1, 2)));
+void log_xxd(const void *, size_t);
+#else
+void log_init(void);
+void log_debug(const char *, ...);
+void log_xxd(const void *, size_t);
+#endif /* __GNUC__ */
+#endif /* FIDO_NO_DIAGNOSTIC */
+
+#endif  // THIRD_PARTY_LIBFIDO2_SRC_LOG_H_
diff --git a/src/types.h b/src/types.h
index 42ed1b7..df03b3b 100644
--- a/src/types.h
+++ b/src/types.h
@@ -7,6 +7,10 @@
 #ifndef _TYPES_H
 #define _TYPES_H
 
+#include <stdint.h>
+
+#include "blob.h"
+#include "fido.h"
 #include "packed.h"
 
 /* COSE ES256 (ECDSA over P-256 with SHA-256) public key */
